/*
 * Copyright 2013 Chris Banes
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven'
apply plugin: 'signing'

afterEvaluate { project ->
  uploadArchives {
    repositories {
      mavenDeployer {
        beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
        repository(url: project.findProperty('RELEASE_REPOSITORY_URL')) {
          authentication(userName: project.findProperty('NEXUS_USERNAME'), password: project.findProperty('NEXUS_PASSWORD'))
        }
        snapshotRepository(url: project.findProperty('SNAPSHOT_REPOSITORY_URL')) {
          authentication(userName: project.findProperty('NEXUS_USERNAME'), password: project.findProperty('NEXUS_PASSWORD'))
        }
        pom.groupId = project.findProperty('POM_GROUP_ID')
        pom.artifactId = project.findProperty('POM_ARTIFACT_ID')
        pom.version = project.findProperty('POM_VERSION_NAME')
        pom.project {
          name project.findProperty('POM_NAME')
          packaging project.findProperty('POM_PACKAGING')
          description project.findProperty('POM_DESCRIPTION')
          url project.findProperty('POM_URL')
          scm {
            url project.findProperty('POM_SCM_URL')
            connection project.findProperty('POM_SCM_CONNECTION')
            developerConnection project.findProperty('POM_SCM_DEV_CONNECTION')
          }
          licenses {
            license {
              name project.findProperty('POM_LICENCE_NAME')
              url project.findProperty('POM_LICENCE_URL')
              distribution project.findProperty('POM_LICENCE_DIST')
            }
          }
          developers {
            developer {
              id project.findProperty('POM_DEVELOPER_ID')
              name project.findProperty('POM_DEVELOPER_NAME')
            }
          }
        }
      }
    }
  }
  signing {
    required { gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
  }
  task androidJavadocs(type: Javadoc) {
    source = android.sourceSets.main.java.srcDirs
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
  }
  task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
  }
  task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
  }
  artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
  }
}
